def ct1(m):
    x = 1
    while x < 6:
        if x >= 5:
            break
        x += 2
        print(f'x = {x}')
    for y in range(m, m+2):
        print(f'y = {y}')
        x += y
    return x
print(ct1(2))

def ct2(x, y):
    for i in range(x):
        if i < 2:
            print("yay")
        for j in range(i, y):
            if (i + j) % 3 == 0:
                print(i, j)
print(ct2(3, 5))

''' 
free response
'''

def countPalNumbers(n):
    counter = 0
    for i in range(1, n+1):
        if isPalNumber(i):
            counter += 1
    return counter

def isPalNumber(n):
    return n == reverse(n)

def reverse(n):
    result = 0
    while (n > 0):
        d = n % 10
        result = result * 10 + d
        n //= 10
    return result

def testCountPalNumbers():
    assert(countPalNumbers(1)==1) #Just 1
    assert(countPalNumbers(5)==5) # 1, 2, 3, 4, 5
    assert(countPalNumbers(10)==9) # all 9 non-zero digits
    assert(countPalNumbers(50)==13) # 9 non-zero digits, 11, 22, 33, 44
    assert(countPalNumbers(1000)==108) # should work for any positive int
    print('passed!')

testCountPalNumbers()


'''
quiz prep

'''

def digitCount(n):
    count = 0
    if (n== 0): return 1
    while n > 0:
        count += 1
        n //= 10
    return count

def isNarcissistic(n):
    tempN = n
    digCount = digitCount(n)
    sum = 0
    while n > 0:
        d = n % 10
        sum += d ** digCount
        n //= 10
    return sum == tempN

def nthNearlyNarcissistic(n,r):
    guess = -1
    found = 0
    while found <= n:
        guess += 1
        if isNearlyNarcissistic(guess,r):
            found += 1
    return guess

def isNearlyNarcissistic(guess, r):
    for g in range(guess-r, guess+r+1):
        if isNarcissistic(g):
            return True
    return False

# Tests for isNarcissistic
def testIsNarcissistics():
    assert(isNarcissistic(0) == True) # 0**1 == 0
    assert(isNarcissistic(7) == True) # 7**1 == 7
    assert(isNarcissistic(1634) == True) # 1**4 + 6**4 + 3**4 + 4**4 == 1634
    assert(isNarcissistic(92727) == True) # 9**5 + 2**5 + 7**5 + 2**5 + 7**5
 # == 92727
    assert(isNarcissistic(112) == False) # 1**3 + 1**3 + 2**3 = 10 != 112
    print('passed!')
# Tests for nthNarcissistic
def testNthNearlyNarcissistics():
    assert(nthNearlyNarcissistic(0, 0) == 0)
    assert(nthNearlyNarcissistic(0, 42) == 0)
    assert(nthNearlyNarcissistic(14, 0) == 1634)
    assert(nthNearlyNarcissistic(14, 4) == 149) # 149 is 4 away from 153, a
 # narcissistic number
    assert(nthNearlyNarcissistic(14, 5) == 14) # 14 is 5 away from 9
    assert(nthNearlyNarcissistic(420, 70) == 1585) # 1585 is 49 away from 1634
    print('passed!')

testIsNarcissistics()
testNthNearlyNarcissistics()
