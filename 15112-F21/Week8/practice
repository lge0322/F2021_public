#Hint: Sets are mutable, so 
#   what does u = t create?
def ct1(L):
    s = set()
    t = set()
    for i in range(len(L)):
        if L[i]==i: u = t
        else:       u = s
        u.add(L[i])
    return (s, t)
print(ct1([4, 1, 6, 3, 6]))


def busiestStudents(rosters):
    res = dict()
    for courses in rosters:
        students = rosters[courses]
        for student in students:
            res[student] = res.get(student, 0) + 1
    
    bestStudents = set()
    bestCount = 0
    for student in res:
        if res[student] > bestCount:
            bestCount = res[student]
            bestStudents = {student}
        elif res[student] == bestCount:
            bestStudents.add(student)
    return bestStudents


def testBusiestStudents():
    print('Testing busiestStudents()...', end='')
    rosters = {
        '15-112':{'amy','bob','claire','dan'},
        '18-100':{'amy','claire','john','mark'},
        '21-127':{'claire','john','zach'},
        '76-101':{'bob','john','margaret'},
    }
    assert(busiestStudents(rosters) == { 'claire', 'john' })
    print('Passed!')

testBusiestStudents()

class Polynomial(object):
    def __init__(self, coeffs):  # Complete this method...
        self.coeffs = coeffs[::-1]
    
    def evalAt(self, n):
        result = 0
        for i in range(len(self.coeffs)):
            curCoeff = self.coeffs[i]
            result += curCoeff * (n ** i)
        return result

    def getCoefficient(self, n):
        if n < len(self.coeffs):
            return self.coeffs[n]
        else:
            return 0
    
    def times(self, n):
        newCoeffs = []
        for i in range(len(self.coeffs)):
            newCoeffs.append(self.coeffs[i] * n)
        return Polynomial(newCoeffs[::-1])

    # ...and finish writing the rest of the class


def testPolynomialClass():
    print('Testing Polynomial class...', end='')
    f = Polynomial([2,3,1]) # 2x**2 + 3x + 1
    assert(f.evalAt(4) == 2*4**2 + 3*4 + 1) # returns f(4), which is 45
    assert(f.evalAt(5) == 2*5**2 + 3*5 + 1) # returns f(5), which is 66
    assert(f.getCoefficient(0) == 1) # get the x**0 coefficient
    assert(f.getCoefficient(1) == 3) # get the x**1 coefficient
    assert(f.getCoefficient(2) == 2) # get the x**2 coefficient
    assert(f.getCoefficient(33) == 0) # assume leading 0's...
    g = f.times(10) # g is a new polynomial, which is 10*f
                    # just multiply each coefficient in f by this value
                    # so g = 20x**2 + 30*x + 10
    assert(g.getCoefficient(0) == 10) # get the x**0 coefficient
    assert(g.getCoefficient(1) == 30) # get the x**1 coefficient
    assert(g.getCoefficient(2) == 20) # get the x**2 coefficient
    assert(g.getCoefficient(33) == 0) # assume leading 0's...
    assert(g.evalAt(4) == 20*4**2 + 30*4 + 10) # returns g(4), which is 450
    print('Passed!')

testPolynomialClass()

def ct_versionA(L):
    s = set()
    d = dict()
    for v in L:
        s.add(v)
        if (v in d):
            d[v] += len(s)
        else:
            d[v] = v
    print(f's = {s}')
    print(f'd = {d}')

ct_versionA([1,2,1,1,5,2])




import copy
def ct(a):
 b = copy.copy(a)
 c = copy.deepcopy(a)
 b[0][1] = 4
 a.insert(0, "OOP")
 c[1].pop()
 a[-1] = "quiz"
 b.pop(1)
 c.extend([1, 2])
 print("a", a)
 print("b", b)
 print("c", c)
ct([ [ 3, 5 ], [ "set", "go" ], [ True ] ])
 